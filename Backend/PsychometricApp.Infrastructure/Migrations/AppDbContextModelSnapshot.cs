// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PsychometricApp.Infrastructure.Persistence;

#nullable disable

namespace PsychometricApp.Infrastructure.Migrations
{
    [DbCon"Text"(typeof(AppDbCon"Text"))]
    partial class AppDbCon"Text"ModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PsychometricApp.Domain.Entities.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>(""QuestionId"")
                        .HasColumnType("integer");

                    b.Property<string>(""Text"")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(""QuestionId"", "OrderNumber")
                        .IsUnique();

                    b.ToTable(""AnswerOptions"");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.BlockResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageScore")
                        .HasColumnType("numeric");

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("UserId", "BlockId")
                        .IsUnique();

                    b.ToTable("BlockResults");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>(""Text"")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.HasKey("Id");

                    b.HasIndex("BlockId", "OrderNumber")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.QuestionBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType(""Text"");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId", "OrderNumber")
                        .IsUnique();

                    b.ToTable("QuestionBlocks");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType(""Text"");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorporateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType(""Text"");

                    b.HasKey("Id");

                    b.HasIndex("CorporateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.UserResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("integer");

                    b.Property<int>(""QuestionId"")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ResponseValue")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex(""QuestionId"");

                    b.HasIndex("UserId", ""QuestionId"")
                        .IsUnique();

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.AnswerOption", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.Question", "Question")
                        .WithMany(""AnswerOptions"")
                        .HasForeignKey(""QuestionId"")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.BlockResult", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.QuestionBlock", "Block")
                        .WithMany("BlockResults")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsychometricApp.Domain.Entities.User", "User")
                        .WithMany("BlockResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.Question", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.QuestionBlock", "Block")
                        .WithMany("Questions")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.QuestionBlock", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.Test", "Test")
                        .WithMany("Blocks")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.Test", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.User", "Creator")
                        .WithMany("CreatedTests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.User", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.User", "Corporate")
                        .WithMany("Assessments")
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.UserResponse", b =>
                {
                    b.HasOne("PsychometricApp.Domain.Entities.AnswerOption", "AnswerOption")
                        .WithMany("UserResponses")
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsychometricApp.Domain.Entities.Question", "Question")
                        .WithMany("UserResponses")
                        .HasForeignKey(""QuestionId"")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PsychometricApp.Domain.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.AnswerOption", b =>
                {
                    b.Navigation("UserResponses");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.Question", b =>
                {
                    b.Navigation(""AnswerOptions"");

                    b.Navigation("UserResponses");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.QuestionBlock", b =>
                {
                    b.Navigation("BlockResults");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.Test", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("PsychometricApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("BlockResults");

                    b.Navigation("CreatedTests");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
